on:
  push:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.set-version.outputs.go-version }}
      node-version: ${{ steps.set-version.outputs.node-version }}
    steps:
      - id: set-version
        run: |
          echo "go-version=1.24.1" >> $GITHUB_OUTPUT
          echo "node-version=22.14.0" >> $GITHUB_OUTPUT
  setup:
    needs: [set-version]
    uses: ./.github/workflows/setup.yml
    with:
      go-version: ${{ needs.set-version.outputs.go-version }}
      node-version: ${{ needs.set-version.outputs.node-version }}
  build:
    runs-on: ubuntu-latest
    needs: [set-version, setup]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build
        with:
          go-version: ${{ needs.set-version.outputs.go-version }}
          node-version: ${{ needs.set-version.outputs.node-version }}
  typecheck:
    runs-on: ubuntu-latest
    needs: [set-version, build]
    steps: 
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.set-version.outputs.node-version }}
      - uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
      - shell: bash
        working-directory: ./frontend
        run: npm run typecheck
  lint:
    runs-on: ubuntu-latest
    needs: [set-version, build]
    steps: 
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.set-version.outputs.node-version }}
      - uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
      - uses: actions/cache@v4
        with:
          path: frontend/wailsjs
          key: ${{ runner.os }}-wailsjs-${{ hashFiles('app/**') }}
      - uses: actions/cache@v4
        with:
          path: frontend/auto-imports.d.ts
          key: ${{ runner.os }}-imports-${{ hashFiles('frontend/src/**') }}
      - uses: actions/cache@v4
        with:
          path: frontend/.eslintcache
          key: ${{ runner.os }}-eslint-${{ hashFiles('frontend/src/**') }}
      - shell: bash
        working-directory: ./frontend
        run: npm run lint
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: dbisous_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_DATABASE: dbisous_test
          MYSQL_ROOT_PASSWORD: mysql
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    needs: [set-version, build]
    steps: 
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.set-version.outputs.go-version }}
      - shell: bash
        run: go test ./app
  test-frontend:
    runs-on: ubuntu-latest
    needs: [set-version, build]
    steps: 
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.set-version.outputs.node-version }}
      - uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
      - uses: actions/cache@v4
        with:
          path: frontend/wailsjs
          key: ${{ runner.os }}-wailsjs-${{ hashFiles('app/**') }}
      - uses: actions/cache@v4
        with:
          path: frontend/auto-imports.d.ts
          key: ${{ runner.os }}-imports-${{ hashFiles('frontend/src/**') }}
      - shell: bash
        working-directory: ./frontend
        run: npm run test
